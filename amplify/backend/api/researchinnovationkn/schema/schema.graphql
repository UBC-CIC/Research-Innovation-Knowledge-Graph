schema {
  query: Query
}

type Edge {
  attributes: EdgeAttributes
  key: String
  source: String
  target: String
  undirected: Boolean
}

type EdgeAttributes {
  color: String
  sharedPublications: [String]
  size: Float
}

type Links {
  key: String!
  numPublications: Int!
  source: String!
  target: String!
}

type Publication {
  authors: String
  journal: String
  link: String
  title: String
  yearPublished: String
}

type Query {
  getAllFaculties: [String]
  getEdges(facultiesToFilterOn: [String], keyword: String): [Edge]
  getResearcher(id: String!): Researcher
  getResearcherData: ResearcherGraph
  getResearchers(facultiesToFilterOn: [String], keyword: String): [ResearcherNode]
  getSharedPublications(id1: String!, id2: String!): [Publication]
}

type Researcher {
  department: String!
  email: String!
  faculty: String!
  firstName: String!
  id: String!
  keywords: String!
  lastName: String!
  rank: String!
}

type ResearcherAttributes {
  color: String!
  department: String!
  email: String!
  faculty: String!
  label: String
  rank: String!
}

type ResearcherGraph {
  links: [Links]
  nodes: [Researcher]
}

type ResearcherNode {
  attributes: ResearcherAttributes
  key: String
}